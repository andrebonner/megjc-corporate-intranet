(function(){
	angular
	.module('intranet',[
		'ngRoute',
		'ngCookies',
		'navigation',
		'home',
		'directory',
		'birthday',
		'login',
		'notice',
		'help',
		'content',
		'shared-services',
		'staff',
		'blog',
		'vacancy',
		'poll',
		'policy',
		'form',
		'promotion',
		'mail'

	]).run(routeLogin)
		.config(config)
		.constant("API_URLS", {
				base_url : '/intranet/api/v1/',
				root: '/intranet/'
		});

	function config($routeProvider, $httpProvider){
		if (!$httpProvider.defaults.headers.get) {
			 $httpProvider.defaults.headers.get = {};
	 }
	 $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
	 $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
	 $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';

	 $routeProvider.otherwise({redirectTo: '/'});
	}
	/**
	 * Checks if an application route is protected.
	 * @param  {[type]} $rootScope     [description]
	 * @param  {[type]} $location      [description]
	 * @param  {[type]} sharedServices [description]
	 * @return {[type]}                [description]
	 */
  function routeLogin($rootScope, $location, $route, loginService){
  	$rootScope.$on('$routeChangeStart', function(event, next, current){
  		if(next.access.restricted && !loginService.isAuthenticated()){
				 $location.path('/login');
				 $route.reload();
			}
  	});
  }
})();

/**
 * Created by captain-kirk on 4/18/16.
 */
(function(){
    angular
        .module('birthday',[])
        .config(config);

    function config($routeProvider){
        $routeProvider
            .when('/birthdays',{
                controller: 'Birthday',
                templateUrl: 'src/app/modules/birthday/birthday.html'
            });
    }
})();

(function(){
    angular
        .module('blog',[])
        .config(config);

    function config($routeProvider){
        $routeProvider
            .when('/blogs', {
                controller: 'Blog',
                templateUrl: 'public/app/modules/blog/blog-list.html'
            }).when('/blogs/:id', {
                controller: 'Blog',
                templateUrl: 'public/app/modules/blog/blog-detail.html'
            });
    }
})();

(function(){
    'use strict';
    angular
        .module('content',[])
        .config(config);

    function config($routeProvider){
        $routeProvider
            .when('/content/:id',{
                controller: 'Content',
                templateUrl: 'public/app/modules/content/content.html'
            });
    }
})();

(function(){
	angular
	.module('directory',[])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/directory',{
			controller: 'Directory',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/directory/directory.html'
		});
	}
})();

(function(){
    'use strict';
    angular
        .module('intranet')
        .filter('sanitize', sanitize)
        .filter('removeEntities', removeEntities)
        .filter('timestamp', function(){
		          return function(dateString){
			             var dateObject = new Date(dateString).toISOString();
			                return dateObject;
		          }
        }).filter('toMB', toMB);

    function toMB(){
      return function(bytes){
        var result = bytes/1048576;
        return result.toFixed(2);
      }
    }

    function sanitize($sce){
        return function(text){
            return $sce.trustAsHtml(text);
        };
    }

    function removeEntities(){
            return function(text) {
                var translate_re = /&(nbsp|amp|quot|lt|gt);/g;
                var translate = {
                    "nbsp": " ",
                    "amp" : "&",
                    "quot": "\"",
                    "lt"  : "<",
                    "gt"  : ">"
                };
                return ( text.replace(translate_re, function(match, entity) {
                    return translate[entity];
                }) );
            };
        }


})();

(function(){
  angular.module('form',[])
        .config(config);

  function config($routeProvider){
    $routeProvider
      .when('/forms', {
        controller: 'Form',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/forms/form-list.html',
        access: {restricted: false}
      });
  }
})();

(function(){
	angular
	.module('help',[])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/help-desk',{
			templateUrl: "public/app/modules/help-desk/help.html",
			controller: 'HelpDesk',
			controllerAs: 'vm',
			access: {restricted: false}
		});
	}
})();

(function(){
	angular
	.module('home',[])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/', {
			controller: 'Home',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/home/home.html',
			access: {restricted: false}
		}).when('/news-feed', {
			controller: 'Home',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/home/news-feed.html',
			access: {restricted: false}
		});
	}
})();

(function(){
	angular
		.module('login',[])
		.config(config);

	function config($routeProvider){
		$routeProvider.when('/login',{
			controller: 'Login',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/login/login.html',
			access: {restricted: false}
		});
	}
})();

(function(){
	angular
	.module('mail',['ngFileUpload', 'ngMessages'])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/mails',{
			templateUrl: "public/app/modules/mail/mail.html",
			controller: 'Mail',
			access: {restricted: true}
		}).when('/mails/create', {
			templateUrl: "public/app/modules/mail/create.html",
			controller: 'Mail',
			access: {restricted: true}
		}).when('/mails/:id/view', {
			templateUrl: "public/app/modules/mail/view.html",
			controller: 'Mail',
			access: {restricted: true}
		});
	}
})();

/**
 * Created by root on 4/21/16.
 */
(function(){
    angular.module('navigation',[]);
})();

(function(){
    angular
        .module('notice',[])
        .config(config);

    function config($routeProvider){
        $routeProvider
            .when('/notices/:slug',{
                controller: 'Notice',
                controllerAs: 'vm',
                templateUrl: 'public/app/modules/notice/notice.html'

            }).when('/notices', {
                controller: 'Notice',
                controllerAs: 'vm',
                templateUrl: 'public/app/modules/notice/notice-list.html'
            });
    }
})();

(function(){
  angular.module('policy',[])
        .config(config);

  function config($routeProvider){
    $routeProvider
      .when('/policies', {
        controller: 'Policy',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/policy/policy-list.html',
        access: {restricted: false}
      });
  }
})();

(function(){
  angular.module('poll',[
    'ngCookies'
  ]);
})();

(function(){
  angular.module('promotion',[])
        .config(config);

  function config($routeProvider){
    $routeProvider
      .when('/events', {
        controller: 'Promotion',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/promotion/promotion.html'
      });
  }
})();

(function(){
    angular
        .module('staff',[])
        .config(config);
    /**
     * Route definitions
     * @param $routeProvider
     */
    function config($routeProvider){
        $routeProvider
            .when('/staff-focus',{
                controller: 'Staff',
                templateUrl: 'public/app/modules/staff/staff.html',
                access: {restricted: false}
            });
    }
})();

(function(){
  angular.module('vacancy',[])
        .config(config);

  function config($routeProvider){
    $routeProvider
      .when('/vacancies', {
        controller: 'Vacancy',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/vacancy/vacancy-list.html',
        access: {restricted: false}
      }).when('/vacancies/:slug',{
        controller: 'Vacancy',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/vacancy/vacancy.html',
        access: {restricted: false}
      });
  }
})();

/**
 * Created by captain-kirk on 4/18/16.
 */
(function () {
    angular
        .module('birthday')
        .controller('Birthday', Birthday);

    Birthday.$inejct = ['$scope', '$http'];

    function Birthday($scope, $http){
        $scope.date = Date.now();

        $http.get('/api/employees/birthday').then(function(data){
            $scope.birthdays = data.data;
        });
    }
})();

(function(){
    angular
        .module('blog')
        .controller('Blog', Blog);

    Blog.$inject = ['$scope', '$routeParams','sharedServices', 'blogService'];

    function Blog($scope, $routeParams, sharedServices, blogService){
        $scope.notices = sharedServices.getNotices();

        blogService.getBlogById($routeParams.id).then(function(blog){
            $scope.blog = blog;
        });
    }
})();
(function(){
    angular
        .module('content')
        .controller('Content', Content);

    Content.$inject = ['$scope', 'sharedServices'];

    function Content($scope, sharedServices) {
        $scope.notices = sharedServices.getNotices();
    }
})();

(function(){
	'use strict';
	angular
	.module('directory')
	.controller('Directory', Directory);

	Directory.$inject = ['$http', '$routeParams', 'directoryService'];

	function Directory($http, $routeParams, directoryService){
		var vm = this;
		vm.search = search;
		vm.getEmployees = getEmployeesByDepartmentId;
		activate();
		/**
		 * Get all departments
		 */
		directoryService
			.getDepartments()
			.then(function(departments){
				vm.departments = departments;
			});
		/**
		 * [activate description]
		 * @return {[type]} [description]
		 */
		function activate(){
			getEmployeesByDepartmentId(5);
		}
		/**
		 * Retrieves employees by department id.
		 * @param  {[type]} id Employee department id.
		 */
		function getEmployeesByDepartmentId(id){
			directoryService
				.getEmployeesByDepartment(id)
				.then(function(employees){
					vm.employees = employees;
				}).catch(function(error){
					vm.employees = [];
				});
		}
		/**
		 * Searches database for a particular staff member
		 * @return {[type]} [description]
		 */
		function search(){
			if(vm.query && vm.query.length > 2){
				directoryService.search(vm.query)
					.then(function(result){
						vm.employees = result;
					}).catch(function(error){
							vm.employees = getEmployeesByDepartmentId(5);
					});
			}else{
				vm.employees = getEmployeesByDepartmentId(5);
			}
		}
	}
})();

(function(){
  angular.module('form')
         .controller('Form', Form);

  Form.$inject = ['$routeParams','sharedServices'];

  function Form($routeParams, sharedServices){
    var vm = this;
    getForms();

    function getForms(){
      sharedServices.getPostsByCategory('forms').then(function(forms){
	        vm.forms = forms;
      }).catch(function(error){
        vm.forms = [];
      });
    }
  }
})();

(function(){
	angular
	.module('help')
	.controller('HelpDesk', HelpDesk);

	HelpDesk.$inject = ['$scope', '$http', 'helpDeskService'];

	function HelpDesk($scope, $http, helpDeskService){
		var vm = this;
		vm.open_tickets = true;
		vm.closed_tickets = false;
		vm.create_ticket = false;
		vm.message = false;
		vm.dismiss = dismissAlert;
		vm.toggle = toggle;
		vm.handleForm = handleForm;
		vm.issue = {};
		activate();
		getClosedTickets();
		/**
		 * Deals with controller startup logic
		 * @return {[type]} [description]
		 */
		function activate(){
			helpDeskService
					.getTickets({fname: 'Courtney', lname: 'Laidlaw'})
					.then(function(tickets){
							vm.tickets = tickets;
					}).catch(function(error){
							vm.tickets = [];
					});
		}
		/**
		 * Process issue form
		 * @param  {[type]} valid [description]
		 * @return {[type]}       [description]
		 */
		function handleForm(valid){
			if(valid){
				vm.issue.category = vm.selected.id;
				vm.issue = {};
				vm.message = true;
				activate();
			}
		};
		/**
		 * Removes bootstrap alert
		 * @return {[type]} [description]
		 */
		function dismissAlert(){ vm.message = false; };
		/**
		 * [toggle description]
		 * @param  {[type]} ticket [description]
		 * @return {[type]}        [description]
		 */
		function toggle(ticket){
			switch(ticket){
				case 'open-tickets':
							activate();
							vm.open_tickets = true;
							vm.create_ticket = false;
							vm.closed_tickets = false;
				break;
				case 'create-ticket':
										getCategories();
										vm.create_ticket = true;
									  vm.open_tickets = false;
										vm.closed_tickets = false;
				break;
				case 'closed-tickets': vm.open_tickets = false;
															vm.create_ticket = false;
															vm.closed_tickets = true;
				break;
			}
		}
		/**
		 * Get categories for issue creation
		 * @return {[type]} [description]
		 */
		function getCategories(){
			helpDeskService.getCategories().then(function(categories){
				vm.selected = categories[0];
				vm.categories = categories;
			}).catch(function(error){
				vm.categories = [];
			});
		}

		function getClosedTickets(){
			helpDeskService
					.getClosedTickets({fname: 'Courtney', lname: 'Laidlaw'})
					.then(function(tickets){
							vm.tickets_closed = tickets;
					}).catch(function(error){
							vm.tickets_closed = [];
					});
		}
	}
})();

(function(){
	'use strict';
	angular
	.module('home')
	.controller('Home', Home);

	Home.$inject = ['$http', '$location', '$window', '$routeParams', 'homeService', 'sharedServices'];
	/**
	 * Home Controller
	 * @param {[type]} $scope    [description]
	 * @param {[type]} $http     [description]
	 * @param {[type]} $location [description]
	 * @param {[type]} $window
	 * @param {[type]} sharedServices
	 */
	function Home($http, $location, $window, $routeParams, homeService, sharedServices){
		var vm = this;
		//getVacancies();
		getLeadStory();
		getDidYouKnow();
		getRSSFeed();
		getStaffFocus();
		getBlogPosts();
		vm.goTo = goTo;
		//vm.getNotices = getNotices;
		vm.getBlogs = getBlogs;
		vm.getStaffFocus = getStaffFocus;

		function goTo(path){
			$location.path('#/' + path);
		};

		function getBlogs(){ sharedServices.goTo('blogs'); };

		function getStaffFocus(){ sharedServices.goTo('staff-focus'); };

		function getLeadStory(){
			homeService.getPostsByCategory('front-page').then(function(lead){
				vm.lead = lead.splice(0,1);
			}).catch(function(error){
				vm.lead = {};
			});
		}

		function getDidYouKnow(){
			homeService.getPostsByCategory('did-you-know').then(function(advice){
				 vm.advices = advice.splice(0,3);
			}).catch(function(error){
				vm.advices = [];
			});
		}

		function getRSSFeed(){
			homeService.getRSSFeed().then(function(items){
				 vm.news = items;
			}).catch(function(error){
				vm.news = [];
			})
		}

		function getStaffFocus(){
			homeService.getPostsByCategory('staff-focus').then(function(staff){
				 vm.staff = staff;
			}).catch(function(error){
				vm.staff = [];
			});
		}

		function getBlogPosts(){
			homeService.getPostsByCategory('blog').then(function(blogs){
				 vm.blogs = blogs.splice(0,5);
			}).catch(function(error){
				vm.blogs = [];
			})
		}
	}
})();

(function(){
	angular
	.module('login')
	.controller('Login', Login);

	Login.$inject = ['$location','loginService'];

	function Login($location, loginService){
		var vm = this;
		vm.handleForm = handleForm;
		vm.user = {
			name : '',
			password : ''
		};
		activate();
		/**
		 * Handles login form to authenticate user.
		 * @param  {[type]} user User email and password.
		 */
		function handleForm(credentials){
			loginService
					.authUser(credentials)
					.then(function(response){
						console.log(response);
						loginService
								.getDepartment(response.dn)
								.then(function (department) {
										loginService
												.getUser(response.dn, department.id)
												.then(function(user){
													if(user.success){
														vm.user = {};
														loginService.setUser(user.user);
														$location.path('/mails');
													}
												}).catch(function(error){
													console.log('Error in getting user');
												})
								}).catch(function(error){
									console.log('Error in getting department');
								});

					}).catch(function (error){
							console.log(error);
					});
		}

		function activate() {
			if(loginService.isAuthenticated()){
				$location.path('/mails');
			}
		}
	}
})();

(function(){
	angular
	.module('mail')
	.controller('Mail', Mail);

	Mail.$inject = ['$routeParams', '$location', '$scope','mailService', 'loginService' , 'API_URLS'];

	function Mail($routeParams, $location, $scope, mailService, loginService, API_URLS){
			$scope.message = false;
			$scope.showOther = false;
			$scope.mail = mailService.initMail();
			var blank = angular.copy($scope.mail);
			$scope.showMail = show;
			$scope.goTo = goTo;
			$scope.createMail = createMail;
			$scope.dimiss = dimiss;
			$scope.removeFile = removeFile;
			$scope.clearForm = clearForm;
			$scope.createMail = createMail;
			$scope.toggle = toggle;
			$scope.root = API_URLS.root;

			getMails();

			if($routeParams.id){
				show($routeParams.id);
			}
			/**
			 * Clears form.
			 * @return {[type]} [description]
			 */
			function clearForm(){
				$scope.file = [];
				$scope.mail = angular.copy(blank);
				$scope.mailForm.$setPristine();
				$scope.mailForm.$setValidity();
    		$scope.mailForm.$setUntouched();
			}
			/**
			 * Show details of mail.
			 * @param  {[type]} id Id of a mail correspondence.
			 */
			function show (id){
				mailService
					.getMail(id)
					.then(function(mail){
						$scope.mail = mail.mail;
						$scope.uploads = mail.uploads;
						$location.path('/mails/' + id + '/view')
					}).catch(function(error){
						$scope.mail = {};
					});
			}
			/**
			 * Get all mails created by a user.
			 * @return {[type]} [description]
			 */
			function getMails (){
				var dept_id = loginService.getDepartmentId();
				mailService
					.getMailsByDepartmentId(dept_id)
					.then(function(mails){
						$scope.mails = mails;
					}).catch(function(error){
						$scope.mails = [];
					})
			}

			function goTo (path){
				$location.path('/' + path);
			}
			/**
			 * Creates a mail correspondence.
			 * @param  {[type]} mail [description]
			 * @return {[type]}      [description]
			 */
			function createMail(){
				if($scope.mail.file_title === '' || $scope.mail.file_title == null){
						$scope.mail.file_title = 'none';
				}
				if($scope.file && $scope.file.length > 0){
						var files = $scope.file[0];
				}
				mailService
					.createMail($scope.mail, files)
					.then(function(res){
						clearForm();
						$scope.message = true;
						getMails();
				}).catch(function(err){
					 console.log('Error in creating mail');
				});
			}
			/**
			 * Dimisses a success or error alert.
			 * @return {[type]} [description]
			 */
			function dimiss(){
				$scope.message = false;
			}

			function removeFile(){
				$scope.files = [];
			}
			/**
			 * Toggles text field to accept other mail type.
			 * @param  {[type]} mail_type The type of mail correspondence.
			 * @return {[type]}           [description]
			 */
			function toggle(mail_type){
				switch (mail_type) {
						case 'other': $scope.showOther = true;
													$scope.showFile = false;
						break;
						case 'file': $scope.showFile = true;
													$scope.showOther = false;
						break;
						default: $scope.showOther = false;
										 $scope.showFile = false;
					}
			}
	}
})();

(function () {
   angular
   .module('navigation')
   .controller('Nav', Nav);

   Nav.$inject = ['$location','loginService'];

   function Nav ($location, loginService){
     var vm = this;
     vm.logout = logout;
     vm.action = 'LOGIN';
     //vm.login = !loginService.isAuthenticated();
     //vm.loggedin = loginService.isAuthenticated();
     activate();

     function activate() {
      vm.login = !loginService.isAuthenticated();
      vm.loggedin = loginService.isAuthenticated();
       if(vm.loggedin){
         vm.action = 'LOGOUT';
       }else{
         vm.action = 'LOGIN';
       }
     }

     function logout() {
       loginService.logout();
       activate();
       $location.path('/login');
     }
   }
})();

/**
 * Created by captain-kirk on 4/18/16.
 */
(function(){
    angular
        .module('notice')
        .controller('Notice', Notice);

    Notice.$inject = ['$routeParams', 'sharedServices'];

    function Notice($routeParams, sharedServices){
        var vm = this;
        vm.goTo = goTo;
        getNotices();

        function getNotices(){
    			sharedServices.getPostsByCategory('staff-notice').then(function(notices){
    				 vm.notices = notices.splice(0,5);
    			}).catch(function(error){
    				vm.notices = [];
    			})
    		};

        sharedServices.getPostBySlug($routeParams.slug).then(function(notice){
          vm.notice = notice;
        }).catch(function(error){
            vm.notice = {};
        });

        function goTo(path){ sharedServices.goTo(path); }
    }
})();

(function(){
  angular.module('policy')
         .controller('Policy', Policy);

  Policy.$inject = ['$routeParams','sharedServices'];

  function Policy($routeParams, sharedServices){
    var vm = this;
    getPolicies();

    function getPolicies(){
      sharedServices.getPostsByCategory('policies').then(function(policies){
	        vm.policies = policies;
      }).catch(function(error){
        vm.policies = [];
      });
    }
  }
})();

(function(){
  angular
    .module('poll')
    .controller('Poll', Poll);

    Poll.$inject = ['$http', '$cookies'];

    function Poll($http, $cookies){
      var vm = this;
      vm.response = "ok";
      vm.processPoll = processPoll;
      vm.showResults = false;
      vm.showPoll = true;
      vm.viewResults = viewResults;
      vm.viewPoll = viewPoll;
      vm.showPollMessage = false;
      vm.dismiss = dismissAlert;

      getResponses();

      function processPoll(){
        var response = {
          poll_id: 1,
          answer: vm.response,
          session_id : $cookies.get('PHPSESSID')
        };

        $http.post('/intranet/api/v1/poll/responses', response)
              .then(function(response){
                vm.showPollMessage = true;
                vm.response = "ok";
                getResponses();
              }).catch(function(error){
                console.log('Erorr');
            });
      }

      function viewResults(){
        vm.showPollMessage = false;
        vm.showResults = true;
        vm.showPoll = false;
        getResponses();
      }

      function viewPoll(){
        vm.showResults = false;
        vm.showPoll = true;
        getResponses();
      }

      function dismissAlert(){ vm.showPollMessage = false; };

      function getResponses(){
        $http.get('/intranet/api/v1/poll/responses').then(function(response){
          vm.results = response.data;
        }).catch(function(error){
            vm.results = {};
        });
      }
    }
})();

(function(){
  angular.module('promotion')
         .controller('Promotion', Promotion);

 Promotion.$inject = ['sharedServices'];

  function Promotion(sharedServices){
    var vm = this;
    getPromotions();	   

    function getPromotions(){
       sharedServices.getPostsByCategory('promos').then(function(promos){
	     vm.promo = promos;
     	}).catch(function(error){
            vm.promo = [];
       });
    }
  }
})();

(function(){
    'use strict';
    angular
        .module('staff')
        .controller('Staff', Staff);

    Staff.$inject = ['$scope', 'sharedServices'];

    function Staff($scope, sharedServices){
        $scope.notices = sharedServices.getNotices();
    }
})();

	(function(){
  angular.module('vacancy')
         .controller('Vacancy', Vacancy);

  Vacancy.$inject = ['$routeParams','sharedServices'];

  function Vacancy($routeParams, sharedServices){
    var vm = this;
    vm.goTo = goTo;
    getVacancies();

    sharedServices.getPostBySlug($routeParams.slug).then(function(vacancy){
      vm.vacancy = vacancy;
    });

   function goTo(path){
	sharedServices.goTo(path);
   }

    function getVacancies(){
      sharedServices.getPostsByCategory('vacancies').then(function(vacancies){
	        vm.vacancies = vacancies;
      }).catch(function(error){
        vm.vacancies = [];
      });
    }
  }
})();

(function(){
    angular
        .module('blog')
        .factory('blogService', blogService);

    blogService.$inject = ['$http'];

    function blogService($http){
        var service = {
            getBlogById: getBlogById
        };
        /**
         * Get a blog post by id
         * @param id
         */
        function getBlogById(id) {
            var url = '/api/v1/blogs/' + id;
            return $http.get(url)
                        .then(getBlogSuccess)
                        .catch(getBlogFailure);
                    /**
                     * Handles data retrieval success
                     * @param blog
                     * @returns {*}
                     */
                    function getBlogSuccess(blog){ return blog.data; }
                    /**
                     * Handles data retrieval error
                     * @param error
                     */
                    function getBlogFailure(error){}
        }
        return service;
    }
})();

(function(){
    angular
        .module('content')
        .factory('contentService', contentService);

    contentService.$inject = ['$http'];

    function contentService($http){
        var service = {
            getContentById: getContentById
        };
        /**
         * Get content details by id
         * @param  {[type]} id Content id
         * @return {[type]}    [description]
         */
        function getContentById(id){
            var url = '/api/v1/content';
            return $http.get(url)
                        .then(getContentSuccess)
                        .catch(getContentFailure);
            /**
             * Handle data retrieval success
             * @param  {[type]} content List of content
             * @return {[type]}         [description]
             */
            function getContentSuccess(content){
                 return content.data;
            }
            /**
             * Handle data retrieval failuire
             * @param  {[type]} error Error object
             * @return {[type]}       [description]
             */
            function getContentFailure(error){

            }
        }
        return service;
    }
})();

(function(){
   'use strict';
   angular
   .module('directory')
   .factory('directoryService', directoryService);

   directoryService.$inject = ['$http'];
   /**
    * [directoryService description]
    * @param  {[type]} $http [description]
    * @return {[type]}       [description]
    */
   function directoryService($http){
       var service = {
           getDepartments: getDepartments,
           getEmployeesByDepartment:getEmployeesByDepartment,
           search: search
       };
       return service;
       /**
        * Get all departments
        */
       function getDepartments(){
           var url = '/intranet/api/v1/departments';
           return $http.get(url)
                        .then(getDepartmentsSuccess)
                        .catch(getDepartmentsFailure);
             /**
              * Handle data retrieval success
              */
            function getDepartmentsSuccess(result){ return result.data; }
            /**
             * Handle data retrieval error
             */
            function getDepartmentsFailure(error){ return error; }
       }
       /**
        * Get employees by department id
        * @param id Deparment id
        */
       function getEmployeesByDepartment(id){
           var url = '/intranet/api/v1/departments/' + id + '/employees';

           return $http.get(url)
                        .then(getEmployeesSuccess)
                        .catch(getEmployeesFailure);
            /**
             * Handle data retrieval success
            */
            function getEmployeesSuccess(result){ return result.data; }
            /**
             * Handle data retrieval error
             */
            function getEmployeesFailure(error){ return error; }
       }
       /**
        * Search database for a employee matching the query
        * @param  {[type]} query [description]
        * @return {[type]}       [description]
        */
       function search(query){
             var url = '/intranet/api/v1/employees/search?q=' + query;
             return $http.get(url)
                         .then(handleSuccess)
                         .catch(handleError);
         /**
          * Handle data retrieval success
         */
         function handleSuccess(result){ return result.data; }
         /**
          * Handle data retrieval error
          */
         function handleError(error){ return error; }
       }
   }
})();

(function(){
  angular
    .module('help')
    .factory('helpDeskService', helpDeskService);

    helpDeskService.$inject = ['$http'];

    function helpDeskService($http){
      var service = {
          createTicket: createTicket,
          getTickets: getTickets,
          getClosedTickets: getClosedTickets,
          getCategories : getCategories
      };
      return service;
      /**
       * Creates a ticket
       * @param  {[type]} ticket [description]
       * @return {[type]}        [description]
       */
      function createTicket(ticket){
         return $http.post('/api/v1/tickets', ticket)
                      .then(handleSuccess)
                      .catch(handleError);
        function handleSuccess(response){ return response.data; }
        function handleError(error){ return error; }
      }
      /**
       * Get all tickets for a user
       * @param  {[type]} user [description]
       * @return {[type]}      [description]
       */
      function getTickets(user){
          return $http.get('/api/v1/tickets/' + user.fname + '/' + user.lname)
                      .then(handleSuccess)
                      .catch(handleError);
         function handleSuccess(response){ return response.data; }
         function handleError(error){ return error; }
      }
      /**
       * Get closed tickets for a user by firstname and lastname
       * @param  {[type]} user [description]
       * @return {[type]}      [description]
       */
      function getClosedTickets(user){
          return $http.get('/api/v1/tickets/' + user.fname + '/' + user.lname + '/closed')
                      .then(handleSuccess)
                      .catch(handleError);
         function handleSuccess(response){ return response.data; }
         function handleError(error){ return error; }
      }
      /**
       * Get issue categories
       * @return {[type]} [description]
       */
      function getCategories(){
        return $http.get('/api/v1/admin/tickets/types')
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data; }
        function handleError(error){ return error; }
      }
    }
})();

(function(){
  angular
    .module('home')
    .factory('homeService', homeService);

    homeService.$inject = ['$http'];

    function homeService($http){
      var folder = "/intranet";
      var apiBaseUrl = folder + "/wordpress/api";
      var service = {
          getVacancies: getVacancies,
          getVacancyBySlug: getVacancyBySlug,
          getPostsByCategory: getPostsByCategory,
          getRSSFeed: getRSSFeed
      };

      return service;
      /**
       * Gets all vacancies
       * @return {[type]} [description]
       */
      function getVacancies(){
        return $http.get(apiBaseUrl + '/get_category_posts?slug=vacancies')
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.posts; }
        function handleError(error){ return error; }
      }

      function getVacancyBySlug(slug){
        return $http.get(apiBaseUrl + '/get_post/?slug=' + slug)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.post};
        function handleError(error) {return error; }
      }

      function getPostsByCategory(category){
        return $http.get(apiBaseUrl + '/get_category_posts?slug=' + category)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.posts; }
        function handleError(error){ return error; }
      }

      function getRSSFeed(){
        return $http.get('http://rss2json.com/api.json?rss_url=http://jamaica-gleaner.com/feed/rss.xml')
    		            .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.items; }
        function handleError(error){ return error; }
      }
    }
})();

(function(){
	'use strict';

	angular
	.module('intranet')
	.factory('rssService', rssService);

	rssService.inject = ['$http'];

	function rssService($http){
		var service = {
			getRss : getRss
		};

		return service;

		function getRss(){
			var base_url = 'http://rss2json.com/api.json?rss_url=';
			var feed_url = 'http://www.jamaicaobserver.com/rss/news/';
			var abs_url = base_url + encodeURI(feed_url);

			$http.get(abs_url).then(function(data){
				console.log(data.data.items.slice(0,3));
				$scope.news = data.data.items.slice(0,3);
				
				// var top_news = data.items.slice(0,3);
				// console.log(top_news);
			});	
		}
	}

})();
(function () {
   angular
   .module('login')
   .service('loginService', loginService);

   loginService.$inject = ['$http', 'API_URLS'];

   function loginService($http, API_URLS) {
     var service = {
       authUser: authUser,
       setUser: setUser,
       getDepartmentId: getDepartmentId,
       getUser: getUser,
       getUserId: getUserId,
       isAuthenticated: isAuthenticated,
       logout: logout,
       getDepartment: getDepartment,
       getUser: getUser
     };
     /**
      * Authenticates a user based on email and password.
      * @param  {[type]} user User's email and password
      */
     function authUser(credentials) {
        if(credentials.name === '' && credentials.password === ''){
         return false;
       }
       return $http
                .post(API_URLS.base_url + 'auth', credentials)
                .then(handleSuccess)
                .catch(handleError);
        function handleSuccess(response){
          return response.data;
        }
        function handleError(error){
          return error;
        }
     }

     function setUser(user) {
       localStorage.setItem('user', JSON.stringify(user));
     }

     function getUser() {
       return JSON.parse(localStorage.getItem('user'));
     }

     function getUserId(){
       var user = JSON.parse(localStorage.getItem('user'));
       return user.id;
     }

     function getDepartmentId() {
       var user = JSON.parse(localStorage.getItem('user'));
       return user.dept_id;
     }

     function isAuthenticated() {
       var user = JSON.parse(localStorage.getItem('user'));
       if(user == null) return false
       else if(typeof user === 'object') return true;
     }

     function logout() {
       localStorage.removeItem('user');
     }

     function getDepartment(dn) {
       return $http.post(API_URLS.base_url + 'departments', {dn: dn})
                   .then(handleSuccess)
                   .catch(handleError);
           function handleSuccess(response){
             return response.data;
           }
           function handleError(error){
             return error;
           }
     }

     function getUser(dn, dept_id) {
       return $http.post(API_URLS.base_url + 'users', {dn: dn, dept_id: dept_id})
                   .then(handleSuccess)
                   .catch(handleError);
           function handleSuccess(response){
             return response.data;
           }
           function handleError(error){
             return error;
           }
     }
     return service;
   }
})();

(function(){
  angular
    .module('mail')
    .service('mailService', mailService);

    mailService.$inject = ['$http', 'API_URLS', 'loginService', 'Upload'];

    function mailService($http, API_URLS, loginService, Upload){
      var service = {
          getMailsByDepartmentId: getMailsByDepartmentId,
          getMail: getMail,
          createMail: createMail,
          initMail: initMail
      };
      /**
       * Creates a mail correspondence.
       * @param  {[type]} mail [description]
       * @return {[type]}      [description]
       */
      function createMail(mail, files){
         mail.created_by = loginService.getUserId();
         mail.dept_id = loginService.getDepartmentId();
         var url = API_URLS.base_url + 'mails';
         return	Upload.upload({
       					 url: url,
       					 file: files,
       					 data: mail
   			      }).then(handleSuccess)
                .catch(handleError);

          function handleSuccess(response) {
            return response.data;
          }
          function handleError(error) {
            return error;
          }
      }
      /**
       * Initializes an empty mail correspondence object
       * @return {[type]} [description]
       */
      function initMail(){
        return {
          mail_type: "letter",
  				sender: "",
  				receipent : "",
  				from_org: "",
  				subject: "",
          receipt_date: new Date(),
          file_title: ''
        }
      }
      /**
       * Get a mail correspondence by id.
       * @param  {[type]} id Id of a mail correspondence
       * @return {[type]}    [description]
       */
      function getMail (id) {
        var url = API_URLS.base_url + 'mails/' + id;
        return $http
                .get(url)
                .then(handleSuccess)
                .catch(handleError);
        function handleSuccess (response){
          return response.data;
        }
        function handleError (error) {
          return error;
        }
      }

      function getMailsByDepartmentId(dept_id) {
        var url = API_URLS.base_url + 'mails/users/' + dept_id;
        return $http
                .get(url)
                .then(handleSuccess)
                .catch(handleError);
        function handleSuccess (response){
          return response.data;
        }
        function handleError (error) {
          return error;
        }
      }
      return service;
    }
})();

(function(){
	'use strict';

	angular
		.module('shared-services',[])
		.factory('sharedServices', sharedServices);

		sharedServices.$inject = ['$http', '$location'];
		/**
		 *
		 * @param  {[type]} $http [description]
		 * @return {[type]}       [description]
		 */
		function sharedServices($http, $location){
			var apiBaseUrl = "/intranet/wordpress/api";
			var services = {
				goTo: goTo,
				getPostBySlug: getPostBySlug,
				getPostsByCategory: getPostsByCategory,
				getPostById:getPostById,
				isAuth: isAuth
			};

			function goTo(path){
				$location.path('/'+path);
			}

      function isAuth(){
      	return $http.get('/api/v1/auth/user')
      				.then(handleSuccess)
      				.catch(handleError);
      	function handleSuccess(response){ return response.data; }
      	function handleError(error){ return error; }
      }

			function getPostsByCategory(category){
        return $http.get(apiBaseUrl + '/get_category_posts?slug=' + category)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.posts; }
        function handleError(error){ return error; }
      }

			function getPostById(id){
				return $http.get(apiBaseUrl + '/get_post?id=' + id)
										.then(handleSuccess)
										.catch(handlError);
				function handleSuccess(response){ return response.data.post; }
				function handlError(error) { return error; }
			}

			function getPostBySlug(slug){
        return $http.get(apiBaseUrl + '/get_post/?slug=' + slug)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.post};
        function handleError(error) {return error; }
      }

	  return services;
	}
})();
