(function(){
  routeLogin.$inject = ["$rootScope", "$location", "loginService"];
	config.$inject = ["$routeProvider", "$httpProvider"];
	angular
	.module('intranet',[
		'ngRoute',
		'ngCookies',
		'home',
		'dashboard',
		'directory',
		'login',
		'help',
		'shared-services',
		'vacancy',
		'promotion',
		'mail',
		'nav'
	]).run(routeLogin)
		.config(config)
		.constant("API_URLS", {
				base_url : '/api/v1/'
		});

	function config($routeProvider, $httpProvider){
	 $routeProvider.otherwise({redirectTo: '/login'})
	}
	/**
	 * Checks if an application route is protected.
	 * @param  {[type]} $rootScope     [description]
	 * @param  {[type]} $location      [description]
	 * @param  {[type]} sharedServices [description]
	 * @return {[type]}                [description]
	 */
  function routeLogin($rootScope, $location, loginService){
  	$rootScope.$on('$routeChangeStart', function(event, next, current){
  		if(next.access.restricted && !loginService.isAuthenticated()){
				 $location.path('/login');
			}
  	});
  }
})();

(function() {
    'use strict';

        config.$inject = ["$routeProvider"];
    angular
        .module('dashboard', [])
        .config(config);

        function config($routeProvider) {
          $routeProvider.when('/dashboard/apps',{
            templateUrl:'public/app/modules/dashboard/dashboard.html',
            controller: 'Dashboard as vm',
            access: {restricted: true}
          }).otherwise({redirectTo: '/'});
        }
})();

(function(){
	config.$inject = ["$routeProvider"];
	angular
	.module('directory',[])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/directory',{
			controller: 'Directory',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/directory/directory.html'
		});
	}
})();

(function(){
    'use strict';
    sanitize.$inject = ["$sce"];
    angular
        .module('intranet')
        .filter('sanitize', sanitize)
        .filter('removeEntities', removeEntities)
        .filter('timestamp', timestamp)
        .filter('toMB', toMB);

    function timestamp () {
      return function (dateString) {
        return new Date(dateString);
      }
    }

    function toMB(){
      return function(bytes){
        var result = bytes/1048576;
        return result.toFixed(2);
      }
    }

    function sanitize($sce){
        return function(text){
            return $sce.trustAsHtml(text);
        };
    }

    function removeEntities(){
            return function(text) {
                var translate_re = /&(nbsp|amp|quot|lt|gt);/g;
                var translate = {
                    "nbsp": " ",
                    "amp" : "&",
                    "quot": "\"",
                    "lt"  : "<",
                    "gt"  : ">"
                };
                return ( text.replace(translate_re, function(match, entity) {
                    return translate[entity];
                }) );
            };
        }
})();

(function(){
	config.$inject = ["$routeProvider"];
	angular
	.module('help',[])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/help-desk',{
			templateUrl: "public/app/modules/help-desk/help.html",
			controller: 'HelpDesk',
			controllerAs: 'vm',
			access: {restricted: false}
		});
	}
})();

(function(){
	config.$inject = ["$routeProvider"];
	angular
	.module('home',[])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/', {
			controller: 'Home',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/home/home.html',
			access: {restricted: false}
		}).when('/news-feed', {
			controller: 'Home',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/home/news-feed.html',
			access: {restricted: false}
		});
	}
})();

(function(){
	config.$inject = ["$routeProvider"];
	angular
		.module('login',[])
		.config(config);

	function config($routeProvider){
		$routeProvider.when('/login',{
			controller: 'Login',
			controllerAs: 'vm',
			templateUrl: 'public/app/modules/login/login.html',
			access: {restricted: false}
		});
	}
})();

(function() {
    'use strict';

    angular.module('nav', []);
})();

(function(){
	config.$inject = ["$routeProvider"];
	angular
	.module('mail',['ngFileUpload', 'ngMessages'])
	.config(config);

	function config($routeProvider){
		$routeProvider
		.when('/dashboard/apps/mails/incoming',{
			templateUrl: "public/app/modules/mail/mail.incoming.html",
			controller: 'Incoming',
			resolve: {
				mails: ["mailService", function (mailService) {
					return mailService.getMailsByDepartmentId();
				}]
			},
			access: {restricted: true}
		}).when('/dashboard/apps/mails/create', {
			templateUrl: "public/app/modules/mail/create.html",
			controller: 'Mail',
			access: {restricted: true}
		}).when('/dashboard/apps/mails/:id/view', {
			templateUrl: "public/app/modules/mail/mail.view.html",
			controller: 'View as vm',
			access: {restricted: true}
		}).when('/dashboard/apps/mails/follow_ups', {
			templateUrl: "public/app/modules/mail/mail.followup.html",
			controller: 'Mail',
			access: {restricted: true}
		}).when('/dashboard/apps/mails/search', {
			templateUrl: "public/app/modules/mail/mail.search.html",
			controller: 'Search',
			access: {restricted: true}
		});
	}
})();

(function(){
  config.$inject = ["$routeProvider"];
  angular.module('promotion',[])
        .config(config);

  function config($routeProvider){
    $routeProvider
      .when('/events', {
        controller: 'Promotion',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/promotion/promotion.html'
      });
  }
})();

(function(){
  config.$inject = ["$routeProvider"];
  angular.module('vacancy',[])
        .config(config);

  function config($routeProvider){
    $routeProvider
      .when('/vacancies', {
        controller: 'Vacancy',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/vacancy/vacancy-list.html',
        access: {restricted: false}
      }).when('/vacancies/:slug',{
        controller: 'Vacancy',
        controllerAs: 'vm',
        templateUrl: 'public/app/modules/vacancy/vacancy.html',
        access: {restricted: false}
      });
  }
})();

(function() {
    'use strict';

    angular
        .module('dashboard')
        .controller('Dashboard', Dashboard);

    Dashboard.$inject = ['$location', 'loginService']
    /* @ngInject */
    function Dashboard($location, loginService) {
        var vm = this
        vm.logout = logout
        activate()

        function activate() {
          var user = JSON.parse(localStorage.getItem('user'))
          vm.username = user.uname
        }

        function logout() {
          loginService.logout()
          $location.path('/login')
        }
    }
})();

(function(){
	'use strict';
	angular
	.module('directory')
	.controller('Directory', Directory);

	Directory.$inject = ['$http', '$routeParams', 'directoryService'];

	function Directory($http, $routeParams, directoryService){
		var vm = this;
		vm.search = search;
		vm.getEmployees = getEmployeesByDepartmentId;
		activate();
		/**
		 * Get all departments
		 */
		directoryService
			.getDepartments()
			.then(function(departments){
				vm.departments = departments;
			});
		/**
		 * [activate description]
		 * @return {[type]} [description]
		 */
		function activate(){
			getEmployeesByDepartmentId(5);
		}
		/**
		 * Retrieves employees by department id.
		 * @param  {[type]} id Employee department id.
		 */
		function getEmployeesByDepartmentId(id){
			directoryService
				.getEmployeesByDepartment(id)
				.then(function(employees){
					vm.employees = employees;
				}).catch(function(error){
					vm.employees = [];
				});
		}
		/**
		 * Searches database for a particular staff member
		 * @return {[type]} [description]
		 */
		function search(){
			if(vm.query && vm.query.length > 2){
				directoryService.search(vm.query)
					.then(function(result){
						vm.employees = result;
					}).catch(function(error){
							vm.employees = getEmployeesByDepartmentId(5);
					});
			}else{
				vm.employees = getEmployeesByDepartmentId(5);
			}
		}
	}
})();

(function(){
	angular
	.module('help')
	.controller('HelpDesk', HelpDesk);

	HelpDesk.$inject = ['$scope', '$http', 'helpDeskService'];

	function HelpDesk($scope, $http, helpDeskService){
		var vm = this;
		vm.open_tickets = true;
		vm.closed_tickets = false;
		vm.create_ticket = false;
		vm.message = false;
		vm.dismiss = dismissAlert;
		vm.toggle = toggle;
		vm.handleForm = handleForm;
		vm.issue = {};
		activate();
		getClosedTickets();
		/**
		 * Deals with controller startup logic
		 * @return {[type]} [description]
		 */
		function activate(){
			helpDeskService
					.getTickets({fname: 'Courtney', lname: 'Laidlaw'})
					.then(function(tickets){
							vm.tickets = tickets;
					}).catch(function(error){
							vm.tickets = [];
					});
		}
		/**
		 * Process issue form
		 * @param  {[type]} valid [description]
		 * @return {[type]}       [description]
		 */
		function handleForm(valid){
			if(valid){
				vm.issue.category = vm.selected.id;
				vm.issue = {};
				vm.message = true;
				activate();
			}
		};
		/**
		 * Removes bootstrap alert
		 * @return {[type]} [description]
		 */
		function dismissAlert(){ vm.message = false; };
		/**
		 * [toggle description]
		 * @param  {[type]} ticket [description]
		 * @return {[type]}        [description]
		 */
		function toggle(ticket){
			switch(ticket){
				case 'open-tickets':
							activate();
							vm.open_tickets = true;
							vm.create_ticket = false;
							vm.closed_tickets = false;
				break;
				case 'create-ticket':
										getCategories();
										vm.create_ticket = true;
									  vm.open_tickets = false;
										vm.closed_tickets = false;
				break;
				case 'closed-tickets': vm.open_tickets = false;
															vm.create_ticket = false;
															vm.closed_tickets = true;
				break;
			}
		}
		/**
		 * Get categories for issue creation
		 * @return {[type]} [description]
		 */
		function getCategories(){
			helpDeskService.getCategories().then(function(categories){
				vm.selected = categories[0];
				vm.categories = categories;
			}).catch(function(error){
				vm.categories = [];
			});
		}

		function getClosedTickets(){
			helpDeskService
					.getClosedTickets({fname: 'Courtney', lname: 'Laidlaw'})
					.then(function(tickets){
							vm.tickets_closed = tickets;
					}).catch(function(error){
							vm.tickets_closed = [];
					});
		}
	}
})();

(function(){
	'use strict';
	angular
	.module('home')
	.controller('Home', Home);

	Home.$inject = ['$http', '$location', '$window', '$routeParams', 'homeService', 'sharedServices'];
	/**
	 * Home Controller
	 * @param {[type]} $scope    [description]
	 * @param {[type]} $http     [description]
	 * @param {[type]} $location [description]
	 * @param {[type]} $window
	 * @param {[type]} sharedServices
	 */
	function Home($http, $location, $window, $routeParams, homeService, sharedServices){
		var vm = this;
		//getVacancies();
		//getLeadStory();
		//getDidYouKnow();
		//getRSSFeed();
		//getStaffFocus();
		//getBlogPosts();
		vm.goTo = goTo;
		//vm.getNotices = getNotices;
		vm.getBlogs = getBlogs;
		vm.getStaffFocus = getStaffFocus;

		function goTo(path){
			$location.path('#/' + path);
		};

		function getBlogs(){ sharedServices.goTo('blogs'); };

		function getStaffFocus(){ sharedServices.goTo('staff-focus'); };

		function getLeadStory(){
			homeService.getPostsByCategory('front-page').then(function(lead){
				vm.lead = lead.splice(0,1);
			}).catch(function(error){
				vm.lead = {};
			});
		}

		function getDidYouKnow(){
			homeService.getPostsByCategory('did-you-know').then(function(advice){
				 vm.advices = advice.splice(0,3);
			}).catch(function(error){
				vm.advices = [];
			});
		}

		function getRSSFeed(){
			homeService.getRSSFeed().then(function(items){
				 vm.news = items;
			}).catch(function(error){
				vm.news = [];
			})
		}

		function getStaffFocus(){
			homeService.getPostsByCategory('staff-focus').then(function(staff){
				 vm.staff = staff;
			}).catch(function(error){
				vm.staff = [];
			});
		}

		function getBlogPosts(){
			homeService.getPostsByCategory('blog').then(function(blogs){
				 vm.blogs = blogs.splice(0,5);
			}).catch(function(error){
				vm.blogs = [];
			})
		}
	}
})();

(function(){
	angular
	.module('login')
	.controller('Login', Login);

	Login.$inject = ['$location', '$scope', 'loginService'];

	function Login($location, $scope, loginService){
		var vm = this;
		vm.handleForm = handleForm;
		vm.message = false;
		vm.user = {
			name : '',
			password : ''
		}

		activate()
		/**
		 * Handles login form to authenticate user.
		 * @param  {[type]} user User email and password.
		 */
		function handleForm(credentials){
			if( loginService.checkCredentials( credentials ) ){
				loginService
						.authUser(credentials)
						.then(function(response){
							if(response.success){
								loginService
										.getDepartment(response.dn)
										.then(function (department) {
												loginService
														.getUser(response.dn, department.id)
														.then(function(user){
															if(user.success){
																vm.user = {};
																loginService.setUser(user.user);
																$location.path('/dashboard/apps');
															}
														}).catch(function(error){
															console.log('Error in getting user')
														})
										}).catch(function(error){
											console.log('Error in getting department');
										});
							}else{
								vm.message = true;
								vm.user.password = '';
							}
						}).catch(function (error){
								console.log(error);
						});
			}else{
				vm.message = true;
				vm.user.password = '';
			}
		}
		/**
		 * Get mails by department id if user is authenticated.
		 * @return {[type]} [description]
		 */
		function activate() {

			if(loginService.isAuthenticated()){
				$location.path('/dashboard/apps')
			}
		}
	}
})();

(function() {
    'use strict'

    angular
        .module('nav')
        .controller('Nav', Nav);

    Nav.$inject = ['$scope', '$location', 'mailService', 'loginService']
    /* @ngInject */
    function Nav($scope, $location, mailService, loginService) {
      var vm = this
      vm.logout = logout

      activate()
      /**
       * Listens for broadcast from parent controller
       */
      $scope.$on('mailCreated', handleBroadcast)
      /**
       * Handles controller start up logic
       * @return {[type]} [description]
       */
      function activate() {
        getMailsCount()
        getFollowupCount()
        setCurrentUser()
      }
      /**
       * Listens for successfull mail created event
       * @param  {[type]} event [description]
       * @param  {[type]} args  [description]
       * @return {[type]}       [description]
       */
      function handleBroadcast(event, args){
        activate()
      }
      /**
       * Gets the mails count
       * @return {[type]} [description]
       */
      function getMailsCount() {
          mailService
            .getMailsByDepartmentId()
            .then(function (mails) {
              vm.mails_count = mails.length
            }).catch(function () {
                vm.mails_count = []
            })
       }
       /**
        * Gets the follow up mails count
        * @return {[type]} [description]
        */
        function getFollowupCount() {
          mailService
            .getMailsForFollowup()
            .then(function (res) {
              vm.followup_count = res.count
            }).catch(function () {
                vm.followup_count = []
            })
        }
        /**
         * Logs out a user
         * @return {[type]} [description]
         */
        function logout() {
          loginService.logout()
          $location.path('/login')
        }
        /**
         * Sets current user's name
         */
        function setCurrentUser() {
          var user = JSON.parse(localStorage.getItem('user'))
          vm.username = user.uname
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('mail')
        .controller('Incoming', Incoming);

    Incoming.$inject = ['$scope', '$location','mails', 'mailService']
    /* @ngInject */
    function Incoming($scope, $location, mails, mailService) {
        $scope.flag = flag
        $scope.showMail = show
        activate()

        function activate() {
          $scope.mails = mails.length > 0 ? mails: []
        }

        function flag( id ) {
          console.log( id )
        }
        /**
         * Show mail by id
         * @param  {[type]} id [description]
         * @return {[type]}    [description]
         */
        function show( id ) {
          $location.path('/dashboard/apps/mails/' + id + '/view')
        }
    }
})();

/**
 * @author Tremaine Buchanan (tremaine.buchanan@megjc.gov.jm)
 */
(function(){
	angular
	.module('mail')
	.controller('Mail', Mail);

	Mail.$inject = ['$routeParams', '$location', '$scope','mailService', 'loginService' , 'API_URLS', 'Upload'];

	function Mail($routeParams, $location, $scope, mailService, loginService, API_URLS, Upload){
			$scope.message = false
			$scope.error = false
			$scope.text = ''
			$scope.showOther = false
			$scope.file_upload_msg = false
			$scope.revealAction = false;
			$scope.showFollowup = false
			var blank = angular.copy($scope.mail);
			$scope.showMail = show;
			$scope.goTo = goTo;
			$scope.createMail = createMail
			$scope.removeFile = removeFile;
			$scope.clearForm = clearForm;
			$scope.createMail = createMail;
			$scope.toggle = toggle;
			$scope.root = API_URLS.root
			$scope.createAction = createAction;
			$scope.revealActionForm = revealActionForm
			$scope.cancel = cancel
			$scope.uploadFile = uploadFile
			$scope.file = []
			$scope.logout = logout
			$scope.update = update

			$scope.toggleFollowup = function () {
				if($scope.mail.follow_up == 2){
					var date = new Date()
					date.setDate(date.getDate() + 7)
					$scope.mail.follow_up_date = date
					$scope.showFollowup = true
				}else{
					$scope.showFollowup = false
				}
			}

			$scope.flag = function () {
				console.log('Flag')
			}

			$scope.revealSubjectEditField = false
			$scope.editSubject = editSubject
			$scope.cancelSubjectEdit = cancelSubjectEdit

			$scope.revealReceivedEditField = false
			$scope.editReceivedOn = editReceivedOn
			$scope.cancelReceviedOnEdit = cancelReceviedOnEdit

			$scope.revealCorrespondenceEditField = false
			$scope.editCorrespondenceDate = editCorrespondenceDate
			$scope.cancelCorrespondenceEdit = cancelCorrespondenceEdit

			$scope.markForFollow = function () {
				var flag = 0
				if($scope.follow_up == true){
					flag = 2
				}else{
					flag = 1
				}
				mailService.followUp(flag, $scope.mail_corr.id)
					.then(function (res) {
					activate()
				})
			}

			activate()
			/**
			 * Clears form.
			 * @return {[type]} [description]
			 */
			function clearForm(){
				$scope.file = [];
				$scope.mail = angular.copy(blank);
				$scope.mailForm.$setPristine();
				$scope.mailForm.$setValidity();
    		$scope.mailForm.$setUntouched();
			}

			function activate() {
				getMails()
				$scope.mail = mailService.initMail();
				getMailsForFollowup()
			}
			/**
			 * Show details of mail.
			 * @param  {[type]} id Id of a mail correspondence.
			 */
			function show (id){
				mailService
					.getMail(id)
					.then(function(mail){
						$scope.mail_corr = mail.mail
						$scope.uploads = mail.uploads
						$scope.actions = mail.actions
						$location.path('/dashboard/apps/mails/' + id + '/view')
					}).catch(function(error){
						$scope.mail = {};
					});
			}
			/**
			 * Get all mails created by a user.
			 * @return {[type]} [description]
			 */
			function getMails (){
				mailService
					.getMailsByDepartmentId()
					.then(function(mails){
						$scope.mails = mails
					}).catch(function(error){
						$scope.mails = [];
					})
			}

			function getMailsForFollowup (){
				var dept_id = loginService.getDepartmentId();
				mailService
					.getMailsForFollowup(dept_id)
					.then(function(mails){
						$scope.follow_ups = mails.mails
					}).catch(function(error){
						$scope.mails = [];
					})
			}

			function goTo (path){
				$location.path('/' + path);
			}
			/**
			 * Creates a mail correspondence.
			 * @param  {[type]} mail [description]
			 * @return {[type]}      [description]
			 */
			function createMail(){
				mailService
					.createMail($scope.mail)
					.then(function(res){
						if(res.status === 500){
							$scope.message = true
							$scope.text = 'An error has occurred on the server'
							$scope.error = true
						}

						if(res.status === 400){
							$scope.message = true
							$scope.text = 'Please review the form for errors'
							$scope.error = true
						}

						if(res.status === 200){
							$scope.message = true
							$scope.text = 'Mail correspondence created successfully'
							$scope.success = true
							clearForm()
							getMails()
							getMailsForFollowup()
							$scope.$broadcast('mailCreated')
						}
				}).catch(function(err){
					 console.log('Error in creating mail');
				});
			}
			/**
			 * Dimisses a success or error alert.
			 * @return {[type]} [description]
			 */
			function dismiss( alert_id ){
				switch (alert_id) {
					case 'file_upload_msg': $scope.file_upload_msg = !$scope.file_upload_msg;
						break;
						case 'message': $scope.message = !$scope.message;
							break;
				}
				//$scope.message = false;
			}
			/**
			 * Clears file upload array
			 * @return {[type]} [description]
			 */
			function removeFile(){
				$scope.file = []
			}
			/**
			 * Toggles text field to accept other mail type.
			 * @param  {[type]} mail_type The type of mail correspondence.
			 * @return {[type]}           [description]
			 */
			function toggle(mail_type){
				switch (mail_type) {
						case 'other': $scope.showOther = true;
													$scope.showFile = false;
						break;
						case 'file': $scope.showFile = true;
													$scope.showOther = false;
						break;
						default: $scope.showOther = false;
										 $scope.showFile = false;
					}
			}
			/**
			 * Toggles mail action form
			 * @return {[type]} [description]
			 */
			function revealActionForm() {
				$scope.revealAction = !$scope.revealAction
			}
			/**
			 * Clears and hides mail action form
			 * @return {[type]} [description]
			 */
			function cancel() {
					$scope.revealAction = false
					$scope.description = ''
			}
			/**
			 * Creates an action for a mail correspondence
			 * @param  {[type]} mail_id [description]
			 * @return {[type]}         [description]
			 */
			function createAction(mail_id){
				var mail = { mail_id : $scope.mail_corr.id,
										 uid: loginService.getUserId(),
									   description: $scope.description
									 }
				mailService
					.createAction(mail)
					.then(function(response){
						cancel()
						getActions($scope.mail_corr.id)
					}).catch(function(error){
						//show error message
					})
			}
			/**
			 * Get actions by mail id
			 * @return {[type]} [description]
			 */
			function getActions(mail_id){
				mailService
					.getActions(mail_id)
					.then(function(actions){
						$scope.actions = actions
					}).catch(function(error){
						$scope.actions = []
					});
			}
			/**
			 * Uploads a file associated with a mail correspondence
			 * @return {[type]} [description]
			 */
			function uploadFile() {
				if($scope.file && $scope.file.length > 0){
						var files = $scope.file[0],
								url = API_URLS.base_url + 'upload/' + $scope.mail_corr.id
						mailService
								.uploadFile( files, $scope.mail_corr.id )
								.then(function ( response ){
									//dismiss( 'file_upload_msg' )
									removeFile()
									getAttachments()
									getActions( $scope.mail_corr.id )
								})
				}
			}
			/**
			 * Get all attachments for a given mail correspondence by id
			 * @return {[type]} [description]
			 */
			function getAttachments() {
				var id = $scope.mail_corr.id
				mailService
						.getAttachments( id )
						.then(function ( attachments ){
								$scope.uploads = attachments
						}).catch(function ( error ){
								console.log('Error in getting attachments')
						})
			}
			/**
			 * Logs out signed in user
			 */
			function logout() {
				loginService.logout()
				$location.path('/login')
			}

			function update() {
				mailService
					.updateMail($scope.mail_corr)
					.then(function( response ){
						$scope.message = true
						show($scope.mail_corr.id)
					}).catch(function( error ){
						 console.log('Error in updating mail')
					})
			}

			function editSubject() {
				$scope.revealSubjectEditField = !$scope.revealSubjectEditField
			}

			function cancelSubjectEdit() {
					$scope.revealSubjectEditField = false
			}

			function editReceivedOn() {
				$scope.revealReceivedEditField = !$scope.revealReceivedEditField
			}

			function cancelReceviedOnEdit() {
					$scope.revealReceivedEditField = false
			}

			function editCorrespondenceDate() {
				$scope.revealCorrespondenceEditField = !$scope.revealCorrespondenceEditField
			}

			function cancelCorrespondenceEdit() {
					$scope.revealCorrespondenceEditField = false
			}

	}
})();

(function() {
    'use strict';

    angular
        .module('mail')
        .controller('Search', Search);

  //  Search.$inject = ['dependencies'];

    /* @ngInject */
    function Search() {
        var vm = this;

        activate();

        function activate() {
            console.log('Search')
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('mail')
        .controller('View', View);

    View.$inject = ['$routeParams','mailService', 'loginService']

    /* @ngInject */
    function View($routeParams, mailService, loginService) {
        var vm = this
        vm.revealAction = false
        vm.revealActionForm = revealActionForm
        vm.cancel = cancel
        vm.createAction = createAction
        activate();

        function activate() {
          mailService
            .getMail($routeParams.id)
            .then(function (mail) {
              vm.mail_corr = mail.mail
              vm.actions = mail.actions
            }).catch(function () {
              vm.mail_corr = []
            })
        }
        /**
         * Get actions by mail id
         * @return {[type]} [description]
         */
        function getActions(mail_id){
          mailService
            .getActions(mail_id)
            .then(function(actions){
              vm.actions = actions
            }).catch(function(error){
              vm.actions = []
            });
        }
        /**
         * Toggles mail action form
         * @return {[type]} [description]
         */
        function revealActionForm() {
          vm.revealAction = !vm.revealAction
        }

        function cancel() {
            vm.revealAction = false
            vm.description = ''
        }

        /**
         * Creates an action for a mail correspondence
         * @param  {[type]} mail_id [description]
         * @return {[type]}         [description]
         */
        function createAction(){
          var mail = { mail_id : vm.mail_corr.id,
                       uid: loginService.getUserId(),
                       description: vm.description
                     }
          mailService
            .createAction(mail)
            .then(function(response){
              cancel()
              getActions(vm.mail_corr.id)
            }).catch(function(error){
              //show error message
            })
        }
    }
})();

(function(){
  angular.module('promotion')
         .controller('Promotion', Promotion);

 Promotion.$inject = ['sharedServices'];

  function Promotion(sharedServices){
    var vm = this;
    getPromotions();	   

    function getPromotions(){
       sharedServices.getPostsByCategory('promos').then(function(promos){
	     vm.promo = promos;
     	}).catch(function(error){
            vm.promo = [];
       });
    }
  }
})();

	(function(){
  angular.module('vacancy')
         .controller('Vacancy', Vacancy);

  Vacancy.$inject = ['$routeParams','sharedServices'];

  function Vacancy($routeParams, sharedServices){
    var vm = this;
    vm.goTo = goTo;
    getVacancies();

    sharedServices.getPostBySlug($routeParams.slug).then(function(vacancy){
      vm.vacancy = vacancy;
    });

   function goTo(path){
	sharedServices.goTo(path);
   }

    function getVacancies(){
      sharedServices.getPostsByCategory('vacancies').then(function(vacancies){
	        vm.vacancies = vacancies;
      }).catch(function(error){
        vm.vacancies = [];
      });
    }
  }
})();

(function() {
    'use strict';

    angular
        .module('dashboard')
        .service('dashboardService', dashboardService);

    //dashboardService.$inject = ['dependencies'];

    /* @ngInject */
    function dashboardService() {
      var service = {}
      return service
    }
})();

(function(){
   'use strict';
   angular
   .module('directory')
   .factory('directoryService', directoryService);

   directoryService.$inject = ['$http'];
   /**
    * [directoryService description]
    * @param  {[type]} $http [description]
    * @return {[type]}       [description]
    */
   function directoryService($http){
       var service = {
           getDepartments: getDepartments,
           getEmployeesByDepartment:getEmployeesByDepartment,
           search: search
       };
       return service;
       /**
        * Get all departments
        */
       function getDepartments(){
           var url = '/intranet/api/v1/departments';
           return $http.get(url)
                        .then(getDepartmentsSuccess)
                        .catch(getDepartmentsFailure);
             /**
              * Handle data retrieval success
              */
            function getDepartmentsSuccess(result){ return result.data; }
            /**
             * Handle data retrieval error
             */
            function getDepartmentsFailure(error){ return error; }
       }
       /**
        * Get employees by department id
        * @param id Deparment id
        */
       function getEmployeesByDepartment(id){
           var url = '/intranet/api/v1/departments/' + id + '/employees';

           return $http.get(url)
                        .then(getEmployeesSuccess)
                        .catch(getEmployeesFailure);
            /**
             * Handle data retrieval success
            */
            function getEmployeesSuccess(result){ return result.data; }
            /**
             * Handle data retrieval error
             */
            function getEmployeesFailure(error){ return error; }
       }
       /**
        * Search database for a employee matching the query
        * @param  {[type]} query [description]
        * @return {[type]}       [description]
        */
       function search(query){
             var url = '/intranet/api/v1/employees/search?q=' + query;
             return $http.get(url)
                         .then(handleSuccess)
                         .catch(handleError);
         /**
          * Handle data retrieval success
         */
         function handleSuccess(result){ return result.data; }
         /**
          * Handle data retrieval error
          */
         function handleError(error){ return error; }
       }
   }
})();

(function(){
  angular
    .module('help')
    .factory('helpDeskService', helpDeskService);

    helpDeskService.$inject = ['$http'];

    function helpDeskService($http){
      var service = {
          createTicket: createTicket,
          getTickets: getTickets,
          getClosedTickets: getClosedTickets,
          getCategories : getCategories
      };
      return service;
      /**
       * Creates a ticket
       * @param  {[type]} ticket [description]
       * @return {[type]}        [description]
       */
      function createTicket(ticket){
         return $http.post('/api/v1/tickets', ticket)
                      .then(handleSuccess)
                      .catch(handleError);
        function handleSuccess(response){ return response.data; }
        function handleError(error){ return error; }
      }
      /**
       * Get all tickets for a user
       * @param  {[type]} user [description]
       * @return {[type]}      [description]
       */
      function getTickets(user){
          return $http.get('/api/v1/tickets/' + user.fname + '/' + user.lname)
                      .then(handleSuccess)
                      .catch(handleError);
         function handleSuccess(response){ return response.data; }
         function handleError(error){ return error; }
      }
      /**
       * Get closed tickets for a user by firstname and lastname
       * @param  {[type]} user [description]
       * @return {[type]}      [description]
       */
      function getClosedTickets(user){
          return $http.get('/api/v1/tickets/' + user.fname + '/' + user.lname + '/closed')
                      .then(handleSuccess)
                      .catch(handleError);
         function handleSuccess(response){ return response.data; }
         function handleError(error){ return error; }
      }
      /**
       * Get issue categories
       * @return {[type]} [description]
       */
      function getCategories(){
        return $http.get('/api/v1/admin/tickets/types')
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data; }
        function handleError(error){ return error; }
      }
    }
})();

(function(){
  angular
    .module('home')
    .factory('homeService', homeService);

    homeService.$inject = ['$http'];

    function homeService($http){
      var apiBaseUrl = "/wordpress/api";
      var service = {
          getVacancies: getVacancies,
          getVacancyBySlug: getVacancyBySlug,
          getPostsByCategory: getPostsByCategory,
          getRSSFeed: getRSSFeed
      };

      return service;
      /**
       * Gets all vacancies
       * @return {[type]} [description]
       */
      function getVacancies(){
        return $http.get(apiBaseUrl + '/get_category_posts?slug=vacancies')
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.posts; }
        function handleError(error){ return error; }
      }

      function getVacancyBySlug(slug){
        return $http.get(apiBaseUrl + '/get_post/?slug=' + slug)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.post};
        function handleError(error) {return error; }
      }

      function getPostsByCategory(category){
        return $http.get(apiBaseUrl + '/get_category_posts?slug=' + category)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.posts; }
        function handleError(error){ return error; }
      }

      function getRSSFeed(){
        return $http.get('http://rss2json.com/api.json?rss_url=http://jamaica-gleaner.com/feed/rss.xml')
    		            .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.items; }
        function handleError(error){ return error; }
      }
    }
})();

(function(){
	'use strict';

	rssService.$inject = ["$http"];
	angular
	.module('intranet')
	.factory('rssService', rssService);

	rssService.inject = ['$http'];

	function rssService($http){
		var service = {
			getRss : getRss
		};

		return service;

		function getRss(){
			var base_url = 'http://rss2json.com/api.json?rss_url=';
			var feed_url = 'http://www.jamaicaobserver.com/rss/news/';
			var abs_url = base_url + encodeURI(feed_url);

			$http.get(abs_url).then(function(data){
				console.log(data.data.items.slice(0,3));
				$scope.news = data.data.items.slice(0,3)

				// var top_news = data.items.slice(0,3);
				// console.log(top_news);
			});
		}
	}

})();

(function () {
   angular
   .module('login')
   .service('loginService', loginService);

   loginService.$inject = ['$http', '$location', 'API_URLS'];

   function loginService($http, $location, API_URLS) {
     var service = {
       authUser: authUser,
       checkCredentials: checkCredentials,
       isAuthenticated: isAuthenticated,
       getDepartmentId: getDepartmentId,
       getDepartment: getDepartment,
       getUserId: getUserId,
       getUser: getUser,
       getUserName: getUserName,
       logout: logout,
       setUser: setUser
     };
     /**
      * Authenticates a user based on email and password.
      * @param  {[type]} user User's email and password
      */
     function authUser(credentials) {
       return $http
                .post(API_URLS.base_url + 'auth', credentials)
                .then(handleSuccess)
                .catch(handleError);
        function handleSuccess(response){
          return response.data
        }
        function handleError(error){
          return error;
        }
     }
     /**
      * Checks if user credentials are valid.
      * @param  object - credentials User name and password
      * @return boolean             [description]
      */
     function checkCredentials( credentials ) {
       if(credentials.name === '' && credentials.password === '') return false;
       if(credentials.name === '' || credentials.password === '') return false;

       return true;
     }
     /**
      * Get department id from dn.
      * @param  string dn Domain Name string
      * @return object
      */
     function getDepartment(dn) {
       return $http.post(API_URLS.base_url + 'departments', {dn: dn})
                   .then(handleSuccess)
                   .catch(handleError);
       /**
        * Handles success
        * @param  {[type]} response [description]
        * @return {[type]}          [description]
        */
       function handleSuccess(response){
         return response.data;
       }
       /**
        * [handleError description]
        * @param  {[type]} error [description]
        * @return {[type]}       [description]
        */
       function handleError(error){
         return error;
       }
     }
     /**
      * Determines if a user is authenticated.
      * @return boolean true if user is authenticated.
      */
     function isAuthenticated() {
       var user = JSON.parse(localStorage.getItem('user'));
       if(user == null) return false
       else if(typeof user === 'object') return true;
     }
     /**
      * Sets user object to local storage.
      * @param object user User object.
      */
     function setUser(user) {
       localStorage.setItem('user', JSON.stringify(user));
     }
     /**
      * Gets a user object from local storage.
      * @return string User object.
      */
     function getUser() {
       return JSON.parse(localStorage.getItem('user'));
     }
     /**
      * Get the user's id from local storage.
      * @return string User's id.
      */
     function getUserId(){
       var user = JSON.parse(localStorage.getItem('user'));
       return user.id;
     }
     /**
      * Get the user's department id from local storage.
      * @return {[type]} [description]
      */
     function getDepartmentId() {
       var user = JSON.parse(localStorage.getItem('user'));
       return user.dept_id;
     }
     /**
      * Logs out user.
      * @return {[type]} [description]
      */
     function logout() {
       localStorage.removeItem('user');
       $location.path('/login')
     }
     /**
      * Get username from local storage.
      * @return string uname
      */
     function getUserName(){
       var user = JSON.parse(localStorage.getItem('user'))
       return user.uname
     }
     /**
      * Gets the user.
      * @param  {[type]} dn      [description]
      * @param  {[type]} dept_id [description]
      * @return {[type]}         [description]
      */
     function getUser(dn, dept_id) {
       return $http.post(API_URLS.base_url + 'users', {dn: dn, dept_id: dept_id})
                   .then(handleSuccess)
                   .catch(handleError);
           function handleSuccess(response){
             return response.data;
           }
           function handleError(error){
             return error;
           }
     }

     return service;
   }
})();

(function(){
  angular
    .module('mail')
    .service('mailService', mailService);

    mailService.$inject = ['$http', 'API_URLS', 'loginService', 'Upload'];

    function mailService($http, API_URLS, loginService, Upload){
      var service = {
          getMailsByDepartmentId: getMailsByDepartmentId,
          getMail: getMail,
          createMail: createMail,
          initMail: initMail,
          getActions: getActions,
          getAttachments: getAttachments,
          createAction: createAction,
          uploadFile: uploadFile,
          updateMail: updateMail,
          getMailsForFollowup, getMailsForFollowup,
          followUp: followUp
      }
      /**
       * [uploadFile description]
       * @param  {[type]} file    [description]
       * @param  {[type]} mail_id [description]
       * @return {[type]}         [description]
       */
      function uploadFile(file, mail_id) {
        var url = API_URLS.base_url + 'upload/' + mail_id
        return Upload.upload({
          url: url,
          file: file
        }).then(function( response ){
            return response
        })
      }

      function getMailsForFollowup() {
        var dept_id = loginService.getDepartmentId(),
            url = API_URLS.base_url + 'mails/departments/' + dept_id + '?follow_up=2'
        return $http
                .get(url)
                .then(handleSuccess)
                .catch(handleError);
        function handleSuccess (response){
          return response.data;
        }
        function handleError (error) {
          return error;
        }
      }
      /**
       * Creates a mail correspondence.
       * @param  {[type]} mail [description]
       * @return {[type]}      [description]
       */
      function createMail(mail){
        if(mail.file_title === '' || mail.file_title == null)
						mail.file_title = 'none'

				if(mail.mail_type === 'other')
					mail.mail_type = mail.other_type

				if(mail.mail_type === 'cabinet_sub')
						mail.mail_type = 'cabinet sub'
        if(mail.follow_up_date == null){
            mail.follow_up_date = new Date(0)
        }

         mail.created_by = loginService.getUserId();
         mail.dept_id = loginService.getDepartmentId();

         var url = API_URLS.base_url + 'mails';
         return $http
                  .post(url, mail)
                  .then(handleSuccess)
                  .catch(handleError);
        function handleSuccess(response) {
            return response
        }

        function handleError(error) {
           return error
        }
      }
      /**
       * Initializes an empty mail correspondence object
       * @return {[type]} [description]
       */
      function initMail(){
        return {
          mail_type: "letter",
  				sender: "",
  				receipent : "",
  				from_org: "",
  				subject: "",
          receipt_date: new Date(),
          file_title: '',
          follow_up: "1"
        }
      }
      /**
       * Get a mail correspondence by id.
       * @param  {[type]} id Id of a mail correspondence
       * @return {[type]}    [description]
       */
      function getMail (id) {
        var url = API_URLS.base_url + 'mails/' + id;
        return $http
                .get(url)
                .then(handleSuccess)
                .catch(handleError);
        function handleSuccess (response){
          return response.data;
        }
        function handleError (error) {
          return error;
        }
      }

      function getMailsByDepartmentId() {
        var dept_id = loginService.getDepartmentId(),
            url = API_URLS.base_url + 'mails/departments/' + dept_id
        return $http
                .get(url)
                .then(handleSuccess)
                .catch(handleError);
        function handleSuccess (response){
          return response.data.mails;
        }
        function handleError (error) {
          return error;
        }
      }
      /**
       * Create a mail correspondence action
       * @param  {[type]} mail [description]
       * @return {[type]}      [description]
       */
      function createAction(mail) {
        var url = API_URLS.base_url + 'mails/' + mail.mail_id + '/actions'
        return $http
                  .post(url, mail)
                  .then(handleSuccess)
                  .catch(handleError);

        function handleSuccess(response) {
          return response.data
        }
        function handleError(error) {
          return error
        }
      }
      /**
       * Get all actions for a given mail correspondence by id
       * @param  {[type]} mail_id [description]
       * @return {[type]}         [description]
       */
      function getActions(mail_id){
        var url = API_URLS.base_url + 'mails/' + mail_id + '/actions'
        return $http
                  .get(url)
                  .then(handleSuccess)
                  .catch(handleError);

        function handleSuccess (response){
          return response.data
        }

        function handleError (error) {
          return error
        }
      }
      /**
       * Get file attachments by mail correspondence id.
       * @param  {[type]} id Mail correspondence id.
       * @return {[type]}    [description]
       */
      function getAttachments ( id ) {
          var url = API_URLS.base_url + 'mails/' + id + '/attachments'
          return $http
                  .get(url)
                  .then(handleSuccess)
                  .catch(handleError);

          function handleSuccess( response ) {
            return response.data
          }

          function handleError ( error ) {
            return error
          }
      }
      /**
       * [updateMail description]
       * @param  {[type]} mail [description]
       * @return {[type]}      [description]
       */
      function updateMail( mail ) {
        var url = API_URLS.base_url + 'mails/' + mail.id
        mail.created_by = loginService.getUserId()
        mail.uname = loginService.getUserName()
        return $http
                .put(url, mail)
                .then(handleSuccess)
                .catch(handleError);

        function handleSuccess( response ) {
          return response.data
        }

        function handleError ( error ) {
          return error
        }
      }

      function followUp( flag, id) {
        var url = API_URLS.base_url + 'mails/' + id,
            update = {
              created_by : loginService.getUserId(),
              uname : loginService.getUserName(),
              follow_up: flag
            }
        // if(flag) update.follow_up = 2
        // else update.follow_up = 1

        return $http
                .put(url, update)
                .then(handleSuccess)
                .catch(handleError);

        function handleSuccess( response ) {
          return response.data
        }

        function handleError ( error ) {
          return error
        }
      }

      return service;
    }
})();

(function(){
	'use strict';

	angular
		.module('shared-services',[])
		.factory('sharedServices', sharedServices);

		sharedServices.$inject = ['$http', '$location'];
		/**
		 *
		 * @param  {[type]} $http [description]
		 * @return {[type]}       [description]
		 */
		function sharedServices($http, $location){
			var apiBaseUrl = "/wordpress/api";
			var services = {
				goTo: goTo,
				getPostBySlug: getPostBySlug,
				getPostsByCategory: getPostsByCategory,
				getPostById:getPostById,
				isAuth: isAuth
			};

			function goTo(path){
				$location.path('/'+path);
			}

      function isAuth(){
      	return $http.get('/api/v1/auth/user')
      				.then(handleSuccess)
      				.catch(handleError);
      	function handleSuccess(response){ return response.data; }
      	function handleError(error){ return error; }
      }

			function getPostsByCategory(category){
        return $http.get(apiBaseUrl + '/get_category_posts?slug=' + category)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.posts; }
        function handleError(error){ return error; }
      }

			function getPostById(id){
				return $http.get(apiBaseUrl + '/get_post?id=' + id)
										.then(handleSuccess)
										.catch(handlError);
				function handleSuccess(response){ return response.data.post; }
				function handlError(error) { return error; }
			}

			function getPostBySlug(slug){
        return $http.get(apiBaseUrl + '/get_post/?slug=' + slug)
                    .then(handleSuccess)
                    .catch(handleError);
        function handleSuccess(response){ return response.data.post};
        function handleError(error) {return error; }
      }

	  return services;
	}
})();
